var directiveModule = angular.module("angularjs-dropdown-multiselect", []); directiveModule.directive("ngDropdownMultiselect", ["$filter", "$document", "$compile", "$parse", function (n, s, e, t) { return { restrict: "AE", scope: { selectedModel: "=", options: "=", extraSettings: "=", events: "=", searchFilter: "=?", translationTexts: "=", groupBy: "@" }, template: function (e, t) { var n = !!t.checkboxes, l = '<div class="multiselect-parent btn-group dropdown-multiselect">'; l += '<button style="width: 260px;line-height: 2.44;" type="button" class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()">{{getButtonText()}}&nbsp;<span class="caret"></span></button>', l += "<ul class=\"dropdown-menu dropdown-menu-form\" ng-style=\"{display: open ? 'block' : 'none', height : settings.scrollable ? settings.scrollableHeight : 'auto' }\" style=\"overflow: scroll\" >", l += '<li ng-hide="!settings.showCheckAll || settings.selectionLimit > 0"><a data-ng-click="selectAll()"><span class="glyphicon glyphicon-ok"></span>  {{texts.checkAll}}</a>', l += '<li ng-show="settings.showUncheckAll"><a data-ng-click="deselectAll();"><span class="glyphicon glyphicon-remove"></span>   {{texts.uncheckAll}}</a></li>', l += '<li ng-hide="(!settings.showCheckAll || settings.selectionLimit > 0) && !settings.showUncheckAll" class="divider"></li>', l += '<li ng-show="settings.enableSearch"><div class="dropdown-header"><input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" /></li>', l += '<li ng-show="settings.enableSearch" class="divider"></li>', !!t.groupBy ? (l += '<li ng-repeat-start="option in orderedItems | filter: searchFilter" ng-show="getPropertyForObject(option, settings.groupBy) !== getPropertyForObject(orderedItems[$index - 1], settings.groupBy)" role="presentation" class="dropdown-header">{{ getGroupTitle(getPropertyForObject(option, settings.groupBy)) }}</li>', l += '<li ng-repeat-end role="presentation">') : l += '<li role="presentation" ng-repeat="option in options | filter: searchFilter">', l += '<a role="menuitem"  style="padding: 0px 16px" tabindex="-1" ng-click="setSelectedItem(getPropertyForObject(option,settings.idProp))">', l += n ? '<div class="checkbox" style="margin-left: 10%"><label><input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, getPropertyForObject(option,settings.idProp))" ng-checked="isChecked(getPropertyForObject(option,settings.idProp))" /> {{getPropertyForObject(option, settings.displayProp)}}</label></div></a>' : "<span data-ng-class=\"{'glyphicon glyphicon-ok': isChecked(getPropertyForObject(option,settings.idProp))}\"></span> {{getPropertyForObject(option, settings.displayProp)}}</a>", l += "</li>", l += '<li class="divider" ng-show="settings.selectionLimit > 1"></li>', l += '<li role="presentation" ng-show="settings.selectionLimit > 1"><a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li>', l += "</ul>", l += "</div>", e.html(l) }, link: function (o, e, t) { var l = e.children()[0]; function i(e) { var t = {}; return "" === o.settings.externalIdProp ? t[o.settings.idProp] = e : t[o.settings.externalIdProp] = e, t } function r(e) { for (var t in e) delete e[t] } o.toggleDropdown = function () { o.open = !o.open }, o.checkboxClick = function (e, t) { o.setSelectedItem(t), e.stopImmediatePropagation() }, o.externalEvents = { onItemSelect: angular.noop, onItemDeselect: angular.noop, onSelectAll: angular.noop, onDeselectAll: angular.noop, onInitDone: angular.noop, onMaxSelectionReached: angular.noop }, o.settings = { dynamicTitle: !0, scrollable: !1, scrollableHeight: "400px", closeOnBlur: !0, displayProp: "label", idProp: "id", externalIdProp: "id", enableSearch: !1, selectionLimit: 0, showCheckAll: !0, showUncheckAll: !0, closeOnSelect: !1, buttonClasses: "btn btn-default", closeOnDeselect: !1, groupBy: t.groupBy || void 0, groupByTextProvider: null, smartButtonMaxItems: 0, smartButtonTextConverter: angular.noop }, o.texts = { checkAll: "Check All", uncheckAll: "Uncheck All", selectionCount: "checked", selectionOf: "/", searchPlaceholder: "Search...", buttonDefaultText: "Select", dynamicButtonTextSuffix: "checked" }, o.searchFilter = o.searchFilter || "", angular.isDefined(o.settings.groupBy) && o.$watch("options", function (e) { angular.isDefined(e) && (o.orderedItems = n("orderBy")(e, o.settings.groupBy)) }), angular.extend(o.settings, o.extraSettings || []), angular.extend(o.externalEvents, o.events || []), angular.extend(o.texts, o.translationTexts), o.singleSelection = 1 === o.settings.selectionLimit, o.singleSelection && angular.isArray(o.selectedModel) && 0 === o.selectedModel.length && r(o.selectedModel), o.settings.closeOnBlur && s.on("click", function (e) { for (var t = e.target.parentElement, n = !1; angular.isDefined(t) && null !== t && !n;) _.contains(t.className.split(" "), "multiselect-parent") && !n && t === l && (n = !0), t = t.parentElement; n || o.$apply(function () { o.open = !1 }) }), o.getGroupTitle = function (e) { return null !== o.settings.groupByTextProvider ? o.settings.groupByTextProvider(e) : e }, o.getButtonText = function () { if (o.settings.dynamicTitle && (0 < o.selectedModel.length || angular.isObject(o.selectedModel) && 0 < _.keys(o.selectedModel).length)) { if (0 < o.settings.smartButtonMaxItems) { var l = []; return angular.forEach(o.options, function (e) { if (o.isChecked(o.getPropertyForObject(e, o.settings.idProp))) { var t = o.getPropertyForObject(e, o.settings.displayProp), n = o.settings.smartButtonTextConverter(t, e); l.push(n || t) } }), o.selectedModel.length > o.settings.smartButtonMaxItems && (l = l.slice(0, o.settings.smartButtonMaxItems)).push("..."), l.join(", ") } var e; return 0 === (e = o.singleSelection ? null !== o.selectedModel && angular.isDefined(o.selectedModel[o.settings.idProp]) ? 1 : 0 : angular.isDefined(o.selectedModel) ? o.selectedModel.length : 0) ? o.texts.buttonDefaultText : e + " " + o.texts.dynamicButtonTextSuffix } return o.texts.buttonDefaultText }, o.getPropertyForObject = function (e, t) { return angular.isDefined(e) && e.hasOwnProperty(t) ? e[t] : "" }, o.selectAll = function () { o.deselectAll(!1), o.externalEvents.onSelectAll(), angular.forEach(o.options, function (e) { o.setSelectedItem(e[o.settings.idProp], !0) }) }, o.deselectAll = function (e) { (e = e || !0) && o.externalEvents.onDeselectAll(), o.singleSelection ? r(o.selectedModel) : o.selectedModel.splice(0, o.selectedModel.length) }, o.setSelectedItem = function (e, t) { var n = i(e), l = null; if (l = "" === o.settings.externalIdProp ? _.find(o.options, n) : n, o.singleSelection) return r(o.selectedModel), angular.extend(o.selectedModel, l), o.externalEvents.onItemSelect(l), void (o.settings.closeOnSelect && (o.open = !1)); t = t || !1; var s = -1 !== _.findIndex(o.selectedModel, n); !t && s ? (o.selectedModel.splice(_.findIndex(o.selectedModel, n), 1), o.externalEvents.onItemDeselect(n)) : !s && (0 === o.settings.selectionLimit || o.selectedModel.length < o.settings.selectionLimit) && (o.selectedModel.push(l), o.externalEvents.onItemSelect(l)), o.settings.closeOnSelect && (o.open = !1) }, o.isChecked = function (e) { return o.singleSelection ? null !== o.selectedModel && angular.isDefined(o.selectedModel[o.settings.idProp]) && o.selectedModel[o.settings.idProp] === i(e)[o.settings.idProp] : -1 !== _.findIndex(o.selectedModel, i(e)) }, o.externalEvents.onInitDone() } } }]);